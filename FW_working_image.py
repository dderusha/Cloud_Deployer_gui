#!/usr/bin/python2.7
import base64
import Tkinter

# This is a base64 encoded GIF image. One neat trick with using Python to create GUIs
# is you can embed your graphics into the code so anything you want to display doesn't
# need to be pre-loaded or downloaded separately. You can only use GIFs in this way.
gifBase = '''

'''

# Our GUI is going to be made into a class. If you're writing something simpler you can
# do without the class structure.
class App:
    def __init__(self):
        # This first line initializes our GUI.
        self.root = Tkinter.Tk()

        # This line will force our window on top of all other windows and remain there.
        self.root.call('wm', 'attributes', '.', '-topmost', True)

        # The title in our title bar.
        self.root.title("FileWave Remote")

        # This gray will help our GUI look like a part of OS X. Here we will set the
        # overall background to this color. For each of the widgets below we will be
        # setting their background colors to match as well.
        bgColor = "#EDEDED"
        self.root.configure(bg=bgColor)

        # This dictionary will be an attribute for our GUI class. We'll use it for
        # capturing the integer values from the Checkbuttons below.
        self.Values = {}

        # Here we are loading our base64 image data and placing it in our window using
        # the Label widget.  You will also see the grid method. There are three styles
        # of window management in Tkinter. Using grid allows us to place widgets according
        # to X,Y coordinates which makes designing your GUI as easy as plotting it out on
        # a sheet paper before writing your code.
        gif = Tkinter.PhotoImage(data = gifBase)
        displayGif = Tkinter.Label(self.root, image = gif, borderwidth = 10, bg = bgColor).grid(row = 0, rowspan = 6, columnspan = 2)

        # This Label widget displays text. I've defined the font and size I want it
        # displayed. I'm also using additional parameters to add padding around the widget
        # and its alignment within the grid space.
        Tkinter.Label(self.root, text = "Enter your AWS Access code", font=("Helvetica Neue Bold", 14), bg = bgColor).grid(row = 4, column = 2, columnspan = 4, padx = 10, sticky = 'w')

        Tkinter.Label(self.root, text = "Enter your AWS Secret code", font=("Helvetica Neue Bold", 14), bg = bgColor).grid(row = 6, column = 2, columnspan = 4, padx = 10, sticky = 'w')
        #Tkinter.Label(self.root, text = "Ticket Number:", font=("Helvetica Neue", 14), bg = bgColor).grid(row = 5, column = 2, padx = 10, sticky = 'w')

        # Just like out Checkbuttons, we will be setting a StringVar to populate the value
        # for our Entry box.
        #Dan took this out
        #self.AWS_ACCESS = Tkinter.StringVar()
        #Tkinter.Entry(self.root, textvariable = self.AWS_ACCESS, justify = 'right', width = 10, font=("Helvetica Neue", 14), highlightbackground = bgColor).grid(row = 5, column = 3, columnspan = 2, sticky = 'w')

        #Tkinter.Label(self.root, text = "Enter your AWS Secret code", font=("Helvetica Neue Bold", 14), bg = bgColor).grid(row = 6, column = 1, columnspan = 4, padx = 10, sticky = 'w')

        # Think of the Frame widget just as the HTML equivalent. We are defining an area
        # of our GUI window to populate widgets into. In this case I am using a Frame to
        # embed a Comment widget into. Without the Frame the Comment fills the window
        # edge to edge and is less attractive.
        Frame1 = Tkinter.Frame(self.root, borderwidth = 1, relief = 'sunken')

        # The Comment widget is a multi-line text input field. Here you see I am setting
        # the parent to Frame1 and not self.root and also using the pack method. Pack
        # will draw a widget in the center of the parent. While it is usually not a good
        # practice to mix different window manager methods it makes sense here as I am
        # populating a single widget into a frame that will be occupying an area of my
        # grid layout.
        #self.Comment = Tkinter.Text(Frame1, width = 60, height = 5, highlightbackground = bgColor, highlightcolor = "#7BAEDC", wrap = Tkinter.WORD, font=("Helvetica Neue", 12))
        #self.Comment.pack()

        # The Frame is placed only after all widgets have been added to it.
        Frame1.grid(row = 7, column = 1, columnspan = 5 , padx = 5)

        # The two buttons for triggering actions in our GUI will be drawn in the lower-
        # right of the windows just like any other OS X GUi. Instead of a variable we are
        # setting a command to execute when clicked. For both buttons we are calling
        # functions that are defined below.
        Tkinter.Button(self.root, text = "Exit", highlightbackground = bgColor, command = self.Exit).grid(row = 8, column = 3, pady = (5, 5), sticky = 'e')
        Tkinter.Button(self.root, text = "Submit", highlightbackground = bgColor, command = self.Submit).grid(row = 8, column = 4, pady = (5, 5), sticky = 'e')

        # The below code is a workaround that allows us to determine the window size in
        # pixels and then position the window wherever we want before drawing it.
        self.root.withdraw()
        self.root.update_idletasks()

        # These lines will position this window in the middle of the screen horizontally
        # and two thirds of the way up vertically (a position I prefer as it is a little
        # more catching to the eye and exact centering)
        x = (self.root.winfo_screenwidth() - self.root.winfo_reqwidth()) / 2
        y = (self.root.winfo_screenheight() - self.root.winfo_reqheight()) / 3
        self.root.geometry("+{0}+{1}".format(x, y))

        # This will prevent the user from resizing the window. Useful when you want to
        # be in control of your GUI's appearance.
        self.root.resizable(False,False)

        # We will now draw the window by calling the mainloop method.
        # In some cases you may want to have the mainloop method be called outside of
        # your GUI's class and within a main function.
        self.root.deiconify()
        self.root.mainloop()

    def Exit(self):
        # Calling the destroy() method on our GUI will close it.
        self.root.destroy()

    def Submit(self):
        # Here you would write your code to take action upon the user input collected.
        # In this example you can look at the Terminal to see output based upon input
        # and selections made.
        print("The user clicked the 'Submit' button.")
        for key, value in self.Values.iteritems():
            if key == 'BoxSync' and value.get():
                print("The user selected 'Box Sync' logs.")

            if key == 'CrashPlan' and value.get():
                print("The user selected 'CrashPlan PROe' logs.")

            if key == 'HipChat' and value.get():
                print("The user selected 'HipChat' logs.")

            if key == 'Install' and value.get():
                print("The user selected 'Install' logs.")

            if key == 'System' and value.get():
                print("The user selected 'System' logs.")

        if self.AWS_ACCESS.get():
            print("User entered AWS_ACCESS code: {0}".format(self.AWS_ACCESS.get()))

        # A Tkinter Comment is different from an Entry box. The code below will read all
        # characters from the first to the last. There are a lot of advanced options for
        # reading input from a Comment making it a very versatile means of user input.
        TextField = self.Comment.get('1.0', 'end')
        if TextField.rstrip():
            print("The user entered the following comment:\n\n{0}".format(TextField))


# Calling the class will execute our GUI.
App()
